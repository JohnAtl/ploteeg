#!/usr/bin/env python3

import argparse
import os
import tempfile
from argparse import RawDescriptionHelpFormatter
from os.path import splitext, basename

import edfio
import matplotlib.pyplot as plt
import mne

try:
    from autoreject import Ransac  # noqa
    from autoreject import AutoReject, set_matplotlib_defaults  # noqa
    from autoreject.utils import interpolate_bads  # noqa
except:
    pass

import re
import sys
import xml.etree.ElementTree as ET

import numpy as np

# T1/T2 are approximated by FT9/FT10
MONTAGE = [
    "Fp1",
    "Fp2",
    "F3",
    "F7",
    "C3",
    "T3",
    "P3",
    "T5",
    "O1",
    "Pz",
    "Fz",
    "F4",
    "F8",
    "Cz",
    "C4",
    "T4",
    "P4",
    "T6",  # T6 is now P8
    "O2",
    "T7",  # T3 is now T7
    "P7",  # T5 is now P7
    "T8",  # T4 is now T8
]

EQUIVALENT_CHANNELS = {
    "T6": "P8",
    "T3": "T7",
    "T5": "P7",
    "T4": "T8",
    "P8": "T6",
    "T7": "T3",
    "P7": "T5",
    "T8": "T4",
}

PHYSIOLOGICAL_SIGNALS = {
    # EOG
    "EOG LOC-A2": "eog",
    "EOG ROC-A2": "eog",
    # EMG
    "EMG CHIN": "emg",
    "EMG AUX1": "emg",
    "EMG AUX2": "emg",
    # Cardiac
    "ECG I": "ecg",
    "ECG II": "ecg",
    # Respiration
    "RR": "resp",
}

# # OTHER PHYSIOLOGICAL SIGNALS
# "FLOW PATIENT-0": "resp",
# "FLOW PATIENT-1": "resp",
# "FLOW PATIENT-2": "resp",
# "EFFORT THO": "resp",
# "EFFORT ABD": "resp",
# "SNORE-0": "resp",
# "SNORE-1": "resp",
# "SPO2": "resp",
# "PLETH": "resp",
# "PULSERATE": "bio",
# "LEG 2": "emg",
# "LEG 1": "emg",
# "BODY": "misc",
# "XPAP CPAP": "resp",
# "XPAP IPAP": "resp",
# "XPAP EPAP": "resp",
# "LEAK TOTAL": "resp",
# "TIDVOL EXHALED": "resp",
# "PRESSCHECK": "resp",
# "ECG IIHF": "resp",
# "TECHNICAL": "syst",

SLEEP_MONTAGE = [
    "F3",
    "F4",
    "C3",
    "C4",
    "O1",
    "O2",
    "ROC",
    "LOC",
    "CHIN",
    "ECG I",
    "ECG II",
    "SPO2",
    "RR",
    "PLETH",
    "BODY",
    "LEG 1",
    "LEG 2",
]


STANDARDIZE_CHANNELS = {
    "EEG F3-A2": "F3",
    "EEG F4-A1": "F4",
    "EEG C3-A2": "C3",
    "EEG C4-A1": "C4",
    "EEG O1-A2": "O1",
    "EEG O2-A1": "O2",
    "EMG CHIN": "CHIN",
    "EOG.*L": "LOC",
    "EOG.*R": "ROC",
    "EKG": "ECG I",
    "\bEMG\b": "CHIN",
}

EEG_SIGNALS = [
    "Fp1",
    "Fp2",
    "F3",
    "F7",
    "C3",
    "T3",
    "P3",
    "T5",
    "O1",
    "Pz",
    "Fz",
    "F4",
    "F8",
    "Cz",
    "C4",
    "T4",
    "P4",
    "T6",  # T6 is now P8
    "O2",
    "T7",  # T3 is now T7
    "P7",  # T5 is now P7
    "T8",  # T4 is now T8
]

MONTAGE = EEG_SIGNALS

EQUIVALENT_CHANNELS = {
    "T6": "P8",
    "T3": "T7",
    "T5": "P7",
    "T4": "T8",
    "P8": "T6",
    "T7": "T3",
    "P7": "T5",
    "T8": "T4",
}

PHYSIOLOGICAL_SIGNALS = {
    # EOG
    "LOC": "eog",
    "ROC": "eog",
    # EMG
    "CHIN": "emg",
    "EMG AUX1": "emg",
    "EMG AUX2": "emg",
    "LEG 1": "emg",
    # Cardiac
    "ECG I": "ecg",
    "ECG II": "ecg",
    "HR": "ecg",
    # Respiration
    "RR": "resp",
    "PLETH": "resp",
    "FLOW": "resp",
    "SNORE": "resp",
    "THOR": "resp",
    "ABDO": "resp",
    "SPO2": "resp",
    # Misc
    "BODY": "misc",
}

FS = 100


def standardize_channel_name(name):

    myre = Regex()
    new_name = name.upper()
    for name_re, st_name in STANDARDIZE_CHANNELS.items():
        if myre.search(name_re, name.upper()):
            new_name = st_name
            break
    return new_name


def standardize_channel_name_order(ch_names, montage=None):
    if montage is None:
        montage = SLEEP_MONTAGE

    names_in_order = []
    others = []
    for name in montage:
        if name in ch_names:
            names_in_order.append(name)
    for name in ch_names:
        if name not in names_in_order:
            others.append(name)
    others = list(np.sort(others))
    return names_in_order + others


def _get_default_channels_re():
    channels = SLEEP_MONTAGE
    channels_re = "|".join([f"\\b{s}\\b" for s in channels])
    return channels_re


def read_edf(
    edf_filename: str,
    picks_re=None,
    invert_ecg=False,
    resample_fs=None,
) -> mne.io.Raw:
    if picks_re is None:
        channels_re = _get_default_channels_re()
    else:
        channels_re = picks_re

    print(f"{channels_re=}")

    if resample_fs is None:
        resample_fs = FS

    edf = edfio.read_edf(str(edf_filename))
    for signal in edf.signals:
        st_chan_name = standardize_channel_name(signal.label)
        print(f"Checking channel {st_chan_name}")
        if picks_re == "all" or re.search(channels_re, st_chan_name):
            print(f"Picked channel {st_chan_name}")
            signal.label = st_chan_name
            if signal.label == "ECG I" and invert_ecg:
                the_data = signal.data
                signal.update_data(-the_data)
        else:
            try:
                edf.drop_signals(signal.label)
                print(f"Dropped channel {signal.label=}/{st_chan_name=}")
            except ValueError:
                pass  # just a duplicate signal
            except Exception:
                raise
            continue

        if signal.sampling_frequency != resample_fs:
            resample_ratio = resample_fs / signal.sampling_frequency
            resampled_signal = mne.filter.resample(
                signal.data, up=resample_ratio, down=1
            )
            signal.update_data(data=resampled_signal, sampling_frequency=resample_fs)

    if len(edf.signals) == 0:
        print("Error: All channels were dropped")
        sys.exit(1)

    _, temp_filename = tempfile.mkstemp(prefix=basename(edf_filename), suffix=".edf")
    edf.write(temp_filename)
    try:
        new_edf = mne.io.read_raw(temp_filename, encoding="latin1", preload=True)
    except IndexError as e:
        print(e)
        sys.exit(1)

    os.remove(temp_filename)

    eeg_channels = set(EEG_SIGNALS).intersection(set(new_edf.ch_names))
    chan_types = dict(zip(eeg_channels, ["eeg"] * len(eeg_channels)))
    new_edf.set_channel_types(chan_types, verbose=False)
    phys_channels = set(PHYSIOLOGICAL_SIGNALS).intersection(set(new_edf.ch_names))
    phys_chan_types = {}
    for chan in phys_channels:
        phys_chan_types[chan] = PHYSIOLOGICAL_SIGNALS[chan]
    new_edf.set_channel_types(phys_chan_types)

    standard_channel_name_order = standardize_channel_name_order(new_edf.ch_names)
    new_edf = new_edf.reorder_channels(standard_channel_name_order)

    return new_edf


def label_eeg_using_rml(
    eeg_filename,
    rml_filename,
    save_filename=None,
    overwrite=False,
    picks_re=None,
    include_channel_fails=False,
    include_respiratory=True,
):
    tree = ET.parse(rml_filename)
    root = tree.getroot()
    try:
        if args.all_chans:
            eeg = mne.io.read_raw(eeg_filename, encoding="latin1", preload=True)
        else:
            eeg = read_edf(eeg_filename, picks_re=picks_re)
    except Exception as e:
        print(f"Exception: {e}")
        print("Falling back to mne.io.read_raw")
        eeg = mne.io.read_raw(eeg_filename, preload=True)

    ns = {"ps": "http://www.respironics.com/PatientStudy.xsd"}

    print("Finding stage events")
    # Traverse the tree extracting sleep stage data
    onsets = []
    durations = []
    descriptions = []
    for x in root.findall(
        "{http://www.respironics.com/PatientStudy.xsd}ScoringData",
    ):
        stagingdata = x.find("{http://www.respironics.com/PatientStudy.xsd}StagingData")
        userstaging = stagingdata.find(
            "{http://www.respironics.com/PatientStudy.xsd}UserStaging"
        )
        staging = userstaging.find(
            "{http://www.respironics.com/PatientStudy.xsd}NeuroAdultAASMStaging"
        )
        last_start = -1
        for stage in staging.findall(
            "{http://www.respironics.com/PatientStudy.xsd}Stage"
        ):
            # print(stage.attrib["Type"],stage.attrib["Start"])
            start = int(float(stage.attrib["Start"]))
            onsets.append(start)
            descriptions.append(stage.attrib["Type"])
            if last_start >= 0:
                durations.append(start - last_start)
            last_start = start
    if len(onsets) > 0:
        durations.append(max(eeg.times))

    if include_channel_fails:
        print("Finding ChannelFail events")
        # Traverse the tree extracting times marked as bad (i.e. ChannelFail)
        events = x.find("{http://www.respironics.com/PatientStudy.xsd}Events")
        for event in events.findall(
            "{http://www.respironics.com/PatientStudy.xsd}Event"
        ):
            if event.attrib["Type"] == "ChannelFail":
                channel = event.findall(
                    "{http://www.respironics.com/PatientStudy.xsd}ChannelFail"
                )
                if int(channel[0].attrib["EdfSignal"]) <= 8:
                    start = int(float(event.attrib["Start"]))
                    duration = int(float(event.attrib["Duration"]))
                    description = "bad channel"
                    onsets.append(start)
                    durations.append(duration)
                    descriptions.append(description)

    if include_respiratory:
        print("Finding Respiratory Events")
        events = tree.findall(".//ps:Event", namespaces=ns)
        for element in events:
            if element.attrib["Type"] in [
                "CentralApnea",
                "ObstructiveApnea",
                "MixedApnea",
                "CentralHypopnea",
                "ObstructiveHypopnea",
                "RERA",
                "RelativeDesaturation",
            ]:
                onsets.append(element.attrib["Start"])
                durations.append(element.attrib["Duration"])
                descriptions.append(element.attrib["Type"])

    print("Finding Arousals")
    events = tree.findall(".//ps:Event", namespaces=ns)
    for element in events:
        if element.attrib["Type"] in ["Arousal"]:
            onsets.append(element.attrib["Start"])
            durations.append(element.attrib["Duration"])
            descriptions.append("Arousal")

    print("Finding Hypnos Arousals")
    events = tree.findall(".//ps:Event", namespaces=ns)
    for element in events:
        if element.attrib["Type"] in ["Hypnos Arousal"]:
            onsets.append(element.attrib["Start"])
            durations.append(element.attrib["Duration"])
            descriptions.append("Hypnos Arousal")

    print("Annotating eeg")
    # onsets, durations, descriptions = contiguous_onset_duration(
    #     onsets, durations, descriptions
    # )
    # Create annotations from the above labels, add to a copy of the eeg
    annot = mne.Annotations(onset=onsets, duration=durations, description=descriptions)
    annot_eeg = eeg.copy()
    annot_eeg.set_annotations(annot)

    if save_filename is not None:
        annot_eeg.save(save_filename, overwrite=overwrite)

    return annot_eeg


# https://stackoverflow.com/a/4980181/3048161
class Regex(object):
    def __init__(self):
        self.last_match = None

    def match(self, pattern, text):
        self.last_match = re.match(pattern, text)
        return self.last_match

    def search(self, pattern, text):
        self.last_match = re.search(pattern, text)
        return self.last_match


def fix_channels(eeg, interpolate=False, fix_missing=False):
    """
    Standardizes channels and names. Adds a 10-20 montage.
    Interpolates missing channels. Removes extraneous channels.

    PARAMETERS:
        eeg - a Raw eeg object

    RETURNS:
        The repaired eeg object.
    """

    myre = Regex()

    include_chans = []
    chan_types = []
    include_orig_chan_name = []
    exclude_chans = []
    ch_name_remap = {}
    for ch in eeg.ch_names:
        included = False
        for chan in MONTAGE:
            if chan in include_chans:
                continue
            if myre.search(rf"[^A-Z]{chan.upper()}[^A-Z]", ch.upper()):
                include_chans.append(chan)
                chan_types.append("eeg")
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = chan
                included = True
                break
            elif myre.search(rf"\b{chan.upper()}[ ]*[-].*\b", ch.upper()):
                include_chans.append(chan)
                chan_types.append("eeg")
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = chan
                included = True
                break
            elif myre.search(rf"(?<!-){chan.upper()}\b", ch.upper()):
                include_chans.append(chan)
                chan_types.append("eeg")
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = chan
                included = True
                break
        if not included:
            if ch.upper() in PHYSIOLOGICAL_SIGNALS.keys():
                include_chans.append(ch)
                chan_types.append(PHYSIOLOGICAL_SIGNALS[ch.upper()])
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = ch
                included = True
            else:
                exclude_chans.append(ch)

    print(f"\ninclude_chans={include_chans}\nexclude_chans={exclude_chans}\n")

    include_chans = set(include_chans)
    exclude_chans = set(exclude_chans)

    keep_ndxs = mne.pick_channels(
        ch_names=[x.upper() for x in eeg.ch_names],
        include=[x.upper() for x in include_orig_chan_name],
    )

    eeg = eeg.pick(keep_ndxs)
    mne.rename_channels(eeg.info, ch_name_remap)

    missing_phys = set(PHYSIOLOGICAL_SIGNALS) - set([x.upper() for x in include_chans])
    print(missing_phys)

    if fix_missing:
        missing = set(MONTAGE) - set(include_chans)
        missing = remove_equivalent_channels(missing, include_chans)
        if len(missing) > 0:
            if isinstance(eeg, mne.epochs.EpochsFIF):
                raise Exception(
                    "fix_channels", "can't create missing channels in epoched data"
                )

            flatline = np.zeros((len(missing), eeg.n_times))
            info = mne.create_info(
                ch_names=missing, sfreq=eeg.info["sfreq"], ch_types="eeg"
            )
            chans = mne.io.RawArray(flatline, info)
            eeg = eeg.add_channels([chans], force_update_info=True)
            eeg.info["bads"] = missing

    chan_types = dict(zip(eeg.ch_names, chan_types))
    eeg.set_channel_types(chan_types, verbose=False)

    montage = mne.channels.make_standard_montage(kind="standard_1020", head_size="auto")
    eeg.set_montage(montage)

    if interpolate:
        eeg.interpolate_bads()

    exclude_chans = set(exclude_chans) - set(include_chans)
    print(f"excluded channels: {exclude_chans}")

    print(ch_name_remap)

    ch_name_unmap = dict([(value, key) for key, value in ch_name_remap.items()])

    return eeg, ch_name_unmap


import sys
from collections import deque
from collections.abc import Mapping, Set
from numbers import Number

ZERO_DEPTH_BASES = (str, bytes, Number, range, bytearray)


def getsize(obj_0):
    """Recursively iterate to sum size of object & members."""
    _seen_ids = set()

    def inner(obj):
        obj_id = id(obj)
        if obj_id in _seen_ids:
            return 0
        _seen_ids.add(obj_id)
        size = sys.getsizeof(obj)
        if isinstance(obj, ZERO_DEPTH_BASES):
            pass  # bypass remaining control flow and return
        elif isinstance(obj, (tuple, list, Set, deque)):
            size += sum(inner(i) for i in obj)
        elif isinstance(obj, Mapping) or hasattr(obj, "items"):
            size += sum(inner(k) + inner(v) for k, v in getattr(obj, "items")())
        # Check for custom object instances - may subclass above too
        if hasattr(obj, "__dict__"):
            size += inner(vars(obj))
        if hasattr(obj, "__slots__"):  # can have __slots__ with __dict__
            size += sum(
                inner(getattr(obj, s)) for s in obj.__slots__ if hasattr(obj, s)
            )
        return size

    return inner(obj_0)


def mne_read_pick_resample(reader, filename):
    try:
        eeg = eeg.pick(picks=picks)
    except:
        print(eeg.info)

    if args.resample is not None:
        eeg.resample(args.resample, n_jobs=4)


def main():
    global args
    # Training settings
    parser = argparse.ArgumentParser(
        prog="ploteeg",
        description="""
    Plot an eeg file using the mne toolbox.

    Files ending in _epo.fif, .set, .mat, and .sqd are treated as epoched data.
    Files ending in .eeg are treated as Nihon Kohden data.
    Files that end in .fif are treated as continuous data.
    Other file extensions will try to be loaded with the default mne behavior, 
    with the addition of the 'encoding="latin1"' argument to
    support extended character sets.
    """,
        formatter_class=RawDescriptionHelpFormatter,
    )
    parser.add_argument("filename", help="filename to plot")
    parser.add_argument(
        "-s", "--scale", type=str, default=None, help="scale size in uV, or 'auto'"
    )
    parser.add_argument(
        "-t",
        "--start",
        type=int,
        default=0,
        help="starting time in seconds (for continuous data)",
    )
    parser.add_argument(
        "-d",
        "--duration",
        type=int,
        default=10,
        help="duration to show in seconds (for continuous data)",
    )
    parser.add_argument(
        "-e",
        "--epochs",
        type=int,
        default=5,
        help="number of epochs to display (for epoched data)",
    )
    parser.add_argument(
        "-b", "--bgcolor", default="w", help="background color (for continuous data)"
    )
    parser.add_argument("-l", "--lowfreq", type=float, default=None)
    parser.add_argument("-u", "--highfreq", type=float, default=None)
    parser.add_argument(
        "-o",
        "--save",
        help="save a screenshot as filename_start.png, and exit",
        action="store_true",
    )
    parser.add_argument("-f", "--savename", help="filename to save the screenshot as")
    parser.add_argument(
        "-x",
        "--width",
        type=int,
        default=30,
        help="size of the plot in inches (inches, I know)",
    )
    parser.add_argument(
        "-y", "--height", type=int, default=10, help="size of the plot in inches"
    )
    parser.add_argument(
        "-p",
        "--pick",
        nargs="+",
        default=None,
        help="channel name filter, e.g. FP matches FP1, FP2, etc. channels",
    )
    parser.add_argument(
        "-m", "--montage", help="add a standard 10-20 montage", action="store_true"
    )
    parser.add_argument(
        "-a",
        "--average",
        help="apply average reference",
        action="store_true",
    )
    parser.add_argument(
        "--resave", type=str, help="save the edited eeg to a new file you specify"
    )
    parser.add_argument(
        "--overwrite",
        help="overwrite a saved eeg file if already present",
        action="store_true",
    )
    parser.add_argument(
        "--reject",
        type=int,
        default=None,
        help="epochs with peak-to-peak voltage on any channel above this maximum will be marked bad",
    )
    parser.add_argument(
        "--autoreject",
        help="use the autoreject package to reject and repair epochs",
        action="store_true",
    )
    parser.add_argument(
        "--ransac",
        help="apply the ransac algorithm to repair bad channels",
        action="store_true",
    )
    parser.add_argument(
        "--fixchannels",
        help="standardize channel names, remove extraneous channels",
        action="store_true",
    )
    parser.add_argument(
        "--resample", help="resample to desired sample rate", type=int, default=None
    )
    parser.add_argument(
        "--event", help="select only the event provided", type=str, default=None
    )
    parser.add_argument(
        "--dont_plot", help="don't display the plot", action="store_true"
    )
    parser.add_argument(
        "-i",
        "--info",
        help="print information about the file and exit",
        action="store_true",
    )
    parser.add_argument(
        "--inverse", help="inverse of the signal, e.g. 1/x", action="store_true"
    )
    parser.add_argument(
        "--exclude",
        type=str,
        action="append",
        nargs="+",
        default=None,
        help="channel(s) to exclude",
    )
    parser.add_argument(
        "--all-chans",
        help="display all channels using mne.io.Raw reader (slow)",
        action="store_true",
    )
    parser.add_argument(
        "--include-channel-fails",
        help="mark channel fails in the plot",
        action="store_true",
    )
    parser.add_argument(
        "--include-respiratory", help="include respiratory markers", action="store_true"
    )
    args = parser.parse_args()

    excludes = None
    if args.exclude is not None:
        excludes = [item for sublist in args.exclude for item in sublist]
        eeg = eeg.pick(picks=None, exclude=excludes)

    picks = None
    if args.pick is not None:
        if args.pick == ["all"] or args.all_chans:
            picks = "all"
        else:
            picks = "|".join([f"\\b{s}\\b" for s in args.pick])
        print(f"{args.pick=}, {picks=}")

    #
    # L O A D   T H E   E E G   F I L E
    #
    root, ext = splitext(args.filename)
    ext = ext.lower()
    if (root[-4:] == "_epo") & (ext == ".fif"):
        eeg = mne.read_epochs(args.filename, preload=True)
    elif ext == ".set":
        try:
            eeg = mne.read_epochs_eeglab(args.filename)
        except:
            eeg = mne.io.read_raw_eeglab(args.filename)
    elif ext == ".mat":
        eeg = mne.read_epochs_fieldtrip(args.filename)
    elif ext == ".sqd":
        eeg = mne.read_epochs_kit(args.filename)
    elif ext == ".eeg":
        eeg = mne.io.read_raw_nihon(args.filename, preload=True)
    elif ext == ".fif":
        eeg = mne.io.read_raw(args.filename, preload=True)
    elif ext == ".dat":
        eeg = mne.io.read_raw_eximia(args.filename, preload=True)
    elif ext == ".rml":
        filename, ext = splitext(args.filename)
        eeg_filename = filename + "[001].edf"
        eeg = label_eeg_using_rml(
            eeg_filename=eeg_filename,
            rml_filename=args.filename,
            picks_re=picks,
            include_channel_fails=args.include_channel_fails,
            include_respiratory=args.include_respiratory,
        )
    else:
        try:
            eeg = read_edf(args.filename, picks_re=picks)
        except Exception as e:
            raise e
            print("Falling back to mne.io.read_raw")
            eeg = mne.io.read_raw(args.filename, preload=True)

    print(eeg.__class__)

    if args.info:
        # print(eeg.filename)
        print(eeg.info)
        if eeg.info["file_id"] is not None:
            for file_id in eeg.info["file_id"].items():
                print(f"file_id: {file_id}")
        # if eeg.info['meas_id'] is not None:
        #     for meas_id in eeg.info['meas_id'].items():
        #         print(f"meas_id: {meas_id}")
        print(
            f"times: {np.min(eeg.times)} to {np.max(eeg.times)} in {len(eeg.times)} steps"
        )

        # Extract channel types
        channel_types = [ch["coil_type"] for ch in eeg.info["chs"]]

        # Convert to unique set
        unique_channel_types = set(channel_types)
        unique_channel_types_str = set(
            mne.channel_type(eeg.info, idx) for idx in range(len(eeg.ch_names))
        )

        for ch_type in unique_channel_types_str:
            data = eeg.get_data(picks=[ch_type])
            print(f"{ch_type} data range: {np.min(data)} to {np.max(data)}")
        print(eeg.ch_names)
        print(f"Size in bytes: {getsize(eeg)}")

        exit(0)

    if args.fixchannels or args.montage:
        eeg, ch_name_unmap = fix_channels(eeg)
        print(ch_name_unmap)
        # mne.rename_channels(eeg.info, ch_name_unmap)

    if (args.highfreq is not None) or (args.lowfreq is not None):
        eeg.filter(l_freq=args.lowfreq, h_freq=args.highfreq, n_jobs=4)
    #
    # TODO perform autoreject on eeg channels
    #
    if args.autoreject:
        ar = AutoReject()
        eeg = ar.fit_transform(eeg)

    if args.ransac:
        ransac = Ransac(verbose=True, n_jobs=1)
        eeg = ransac.fit_transform(eeg)

    if args.scale is None:
        scalings = dict(eeg=1e-4, ecg=5e-4, emg=1e-4, resp=100)
    elif args.scale == "auto":
        scalings = "auto"
    else:
        scalings = dict(eeg=float(args.scale) / 2000000, ecg=2e10, emg=2e10)

    if args.average:
        eeg = eeg.set_eeg_reference(ref_channels="average")

    if args.reject is not None:
        eeg.drop_bad(reject=dict(eeg=args.reject / 1000000))

    if args.inverse:
        epsilon = 1e-9
        eeg._data = 1 / (eeg._data + epsilon)

    #
    # Plot continuous data
    #
    if isinstance(eeg, mne.io.BaseRaw):
        fig = eeg.plot(
            scalings=scalings,
            start=args.start,
            duration=args.duration,
            bgcolor=args.bgcolor,
            block=True,
            show=False,
        )

    #
    # Plot epoched data
    #
    else:
        print(f"Event types: {eeg.event_id}")

        id_to_label = {value: key for key, value in eeg.event_id.items()}
        annotations = mne.annotations_from_events(
            eeg.events, eeg.info["sfreq"], event_desc=id_to_label
        )
        eeg.set_annotations(annotations)

        if args.event is not None:
            eeg = eeg[args.event]

        if args.dont_plot == False:
            fig = eeg.plot(
                title=args.filename,
                scalings=scalings,
                picks="all",
                n_epochs=args.epochs,
                block=True,
                show=False,
                events=args.resample
                is None,  # if resampled, events will not coincide with new timeline
            )
            fig.set_figheight(args.height)
            fig.set_figwidth(args.width)
            fig.set_layout_engine("tight")
            fig.canvas.manager.set_window_title(args.filename)

    if args.save:
        if args.savename == None:
            filename = f"{root}_{args.start}.png"
        else:
            filename = args.savename
        plt.savefig(filename)
        print(f"Saved {filename}")
    else:
        plt.show()

    if args.resave:
        eeg.save(args.resave, overwrite=args.overwrite)


if __name__ == "__main__":
    main()
