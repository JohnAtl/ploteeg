#!/usr/bin/env python3

import argparse
from argparse import RawDescriptionHelpFormatter
import mne
from os.path import splitext
import matplotlib.pyplot as plt

from autoreject import Ransac  # noqa
from autoreject.utils import interpolate_bads  # noqa
from autoreject import AutoReject, set_matplotlib_defaults  # noqa
import re


# T1/T2 are approximated by FT9/FT10
MONTAGE = [
    "Fp1",
    "Fp2",
    "F3",
    "F7",
    "C3",
    "T3",
    "P3",
    "T5",
    "O1",
    "Pz",
    "Fz",
    "F4",
    "F8",
    "Cz",
    "C4",
    "T4",
    "P4",
    "T6",  # T6 is now P8
    "O2",
    "T7",  # T3 is now T7
    "P7",  # T5 is now P7
    "T8",  # T4 is now T8
]

EQUIVALENT_CHANNELS = {
    "T6": "P8",
    "T3": "T7",
    "T5": "P7",
    "T4": "T8",
    "P8": "T6",
    "T7": "T3",
    "P7": "T5",
    "T8": "T4",
}

PHYSIOLOGICAL_SIGNALS = {
    # EOG
    "EOG LOC-A2": "eog",
    "EOG ROC-A2": "eog",
    # EMG
    "EMG CHIN": "emg",
    "EMG AUX1": "emg",
    "EMG AUX2": "emg",
    # CARDIAC
    "ECG I": "ecg",
    "RR": "resp",
    "ECG II": "ecg",
}

# # OTHER PHYSIOLOGICAL SIGNALS
# "FLOW PATIENT-0": "resp",
# "FLOW PATIENT-1": "resp",
# "FLOW PATIENT-2": "resp",
# "EFFORT THO": "resp",
# "EFFORT ABD": "resp",
# "SNORE-0": "resp",
# "SNORE-1": "resp",
# "SPO2": "resp",
# "PLETH": "resp",
# "PULSERATE": "bio",
# "LEG 2": "emg",
# "LEG 1": "emg",
# "BODY": "misc",
# "XPAP CPAP": "resp",
# "XPAP IPAP": "resp",
# "XPAP EPAP": "resp",
# "LEAK TOTAL": "resp",
# "TIDVOL EXHALED": "resp",
# "PRESSCHECK": "resp",
# "ECG IIHF": "resp",
# "TECHNICAL": "syst",


# https://stackoverflow.com/a/4980181/3048161
class Regex(object):
    def __init__(self):
        self.last_match = None

    def match(self, pattern, text):
        self.last_match = re.match(pattern, text)
        return self.last_match

    def search(self, pattern, text):
        self.last_match = re.search(pattern, text)
        return self.last_match


def fix_channels(eeg, interpolate=False, fix_missing=False):
    """
    Standardizes channels and names. Adds a 10-20 montage.
    Interpolates missing channels. Removes extraneous channels.

    PARAMETERS:
        eeg - a Raw eeg object

    RETURNS:
        The repaired eeg object.
    """

    myre = Regex()

    include_chans = []
    chan_types = []
    include_orig_chan_name = []
    exclude_chans = []
    ch_name_remap = {}
    for ch in eeg.ch_names:
        included = False
        for chan in MONTAGE:
            if chan in include_chans:
                continue
            if myre.search(rf"[^A-Z]{chan.upper()}[^A-Z]", ch.upper()):
                include_chans.append(chan)
                chan_types.append("eeg")
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = chan
                included = True
                break
            elif myre.search(rf"\b{chan.upper()}[ ]*[-].*\b", ch.upper()):
                include_chans.append(chan)
                chan_types.append("eeg")
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = chan
                included = True
                break
            elif myre.search(rf"(?<!-){chan.upper()}\b", ch.upper()):
                include_chans.append(chan)
                chan_types.append("eeg")
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = chan
                included = True
                break
        if not included:
            if ch.upper() in PHYSIOLOGICAL_SIGNALS.keys():
                include_chans.append(ch)
                chan_types.append(PHYSIOLOGICAL_SIGNALS[ch.upper()])
                include_orig_chan_name.append(ch)
                ch_name_remap[ch] = ch
                included = True
            else:
                exclude_chans.append(ch)

    print(f"\ninclude_chans={include_chans}\nexclude_chans={exclude_chans}\n")

    include_chans = set(include_chans)
    exclude_chans = set(exclude_chans)

    keep_ndxs = mne.pick_channels(
        ch_names=[x.upper() for x in eeg.ch_names],
        include=[x.upper() for x in include_orig_chan_name],
    )

    eeg = eeg.pick(keep_ndxs)
    mne.rename_channels(eeg.info, ch_name_remap)

    missing_phys = set(PHYSIOLOGICAL_SIGNALS) - set([x.upper() for x in include_chans])
    print(missing_phys)

    if fix_missing:
        missing = set(MONTAGE) - set(include_chans)
        missing = remove_equivalent_channels(missing, include_chans)
        if len(missing) > 0:
            if isinstance(eeg, mne.epochs.EpochsFIF):
                raise Exception(
                    "fix_channels", "can't create missing channels in epoched data"
                )

            flatline = np.zeros((len(missing), eeg.n_times))
            info = mne.create_info(
                ch_names=missing, sfreq=eeg.info["sfreq"], ch_types="eeg"
            )
            chans = mne.io.RawArray(flatline, info)
            eeg = eeg.add_channels([chans], force_update_info=True)
            eeg.info["bads"] = missing

    chan_types = dict(zip(eeg.ch_names, chan_types))
    eeg.set_channel_types(chan_types, verbose=False)

    montage = mne.channels.make_standard_montage(kind="standard_1020", head_size="auto")
    eeg.set_montage(montage)

    if interpolate:
        eeg.interpolate_bads()

    exclude_chans = set(exclude_chans) - set(include_chans)
    print(f"excluded channels: {exclude_chans}")

    print(ch_name_remap)

    ch_name_unmap = dict([(value, key) for key, value in ch_name_remap.items()])

    return eeg, ch_name_unmap


def main():
    # Training settings
    parser = argparse.ArgumentParser(
        prog="ploteeg",
        description="""
    Plot an eeg file using the mne toolbox.

    Files ending in _epo.fif, .set, .mat, and .sqd are treated as epoched data.
    Files ending in .eeg are treated as Nihon Kohden data.
    Files that end in .fif are treated as continuous data.
    Other file extensions will try to be loaded with the default mne behavior, 
    with the addition of the 'encoding="latin1"' argument to
    support extended character sets.
    """,
        formatter_class=RawDescriptionHelpFormatter,
    )
    parser.add_argument("filename", help="filename to plot")
    parser.add_argument(
        "-s", "--scale", type=str, default=None, help="scale size in uV, or 'auto'"
    )
    parser.add_argument(
        "-t",
        "--start",
        type=int,
        default=0,
        help="starting time in seconds (for continuous data)",
    )
    parser.add_argument(
        "-d",
        "--duration",
        type=int,
        default=10,
        help="duration to show in seconds (for continuous data)",
    )
    parser.add_argument(
        "-e",
        "--epochs",
        type=int,
        default=5,
        help="number of epochs to display (for epoched data)",
    )
    parser.add_argument(
        "-b", "--bgcolor", default="w", help="background color (for continuous data)"
    )
    parser.add_argument("-l", "--lowpass", type=int, default=None)
    parser.add_argument("-u", "--highpass", type=int, default=None)
    parser.add_argument(
        "-o",
        "--save",
        help="save a screenshot as filename_start.png, and exit",
        action="store_true",
    )
    parser.add_argument("-f", "--savename", help="filename to save the screenshot as")
    parser.add_argument(
        "-x",
        "--width",
        type=int,
        default=30,
        help="size of the plot in inches (inches, I know)",
    )
    parser.add_argument(
        "-y", "--height", type=int, default=10, help="size of the plot in inches"
    )
    parser.add_argument(
        "-p",
        "--pick",
        type=str,
        default=None,
        help="channel name filter, e.g. FP matches FP1, FP2, etc. channels",
    )
    parser.add_argument(
        "-m", "--montage", help="add a standard 10-20 montage", action="store_true"
    )
    parser.add_argument(
        "-a",
        "--average",
        help="apply average reference",
        action="store_true",
    )
    parser.add_argument(
        "--resave", type=str, help="save the edited eeg to a new file you specify"
    )
    parser.add_argument(
        "--overwrite",
        help="overwrite a saved eeg file if already present",
        action="store_true",
    )
    parser.add_argument(
        "--reject",
        type=int,
        default=None,
        help="epochs with peak-to-peak voltage on any channel above this maximum will be marked bad",
    )
    parser.add_argument(
        "--autoreject",
        help="use the autoreject package to reject and repair epochs",
        action="store_true",
    )
    parser.add_argument(
        "--ransac",
        help="apply the ransac algorithm to repair bad channels",
        action="store_true",
    )
    parser.add_argument(
        "--fixchannels",
        help="standardize channel names, remove extraneous channels",
        action="store_true",
    )
    args = parser.parse_args()

    #
    # L O A D   T H E   E E G   F I L E
    #
    root, ext = splitext(args.filename)
    ext = ext.lower()
    if (root[-4:] == "_epo") & (ext == ".fif"):
        eeg = mne.read_epochs(args.filename, preload=True)
    elif ext == ".set":
        eeg = mne.read_epochs_eeglab()(args.filename, preload=True)
    elif ext == ".mat":
        eeg = mne.read_epochs_fieldtrip(args.filename)
    elif ext == ".sqd":
        eeg = mne.read_epochs_kit(args.filename)
    elif ext == ".eeg":
        eeg = mne.io.read_raw_nihon(args.filename, preload=True)
    elif ext == ".fif":
        eeg = mne.io.read_raw(args.filename, preload=True)
    else:
        eeg = mne.io.read_raw(args.filename, preload=True, encoding="latin1")

    print(eeg.__class__)

    if args.pick is not None:
        chans = []
        for ch in eeg.ch_names:
            if args.pick.lower() in ch.lower():
                chans.append(ch)
        if len(chans) == 0:
            print(f"No channels selected by pick {args.pick}")
            exit(1)
        eeg = eeg.pick(chans)

    if args.fixchannels or args.montage:
        eeg, ch_name_unmap = fix_channels(eeg)
        print(ch_name_unmap)
        mne.rename_channels(eeg.info, ch_name_unmap)

    #
    # TODO perform autoreject on eeg channels
    #
    if args.autoreject:
        ar = AutoReject()
        eeg = ar.fit_transform(eeg)

    if args.ransac:
        ransac = Ransac(verbose=True, n_jobs=1)
        eeg = ransac.fit_transform(eeg)

    if args.scale is None:
        scalings = dict(eeg=1e-4, ecg=5e-4, emg=1e-4, resp=100)
    elif args.scale == "auto":
        scalings = "auto"
    else:
        scalings = dict(eeg=args.scale / 2000000, ecg=2e10, emg=2e10)

    if args.average:
        eeg = eeg.set_eeg_reference(ref_channels="average")

    if args.reject is not None:
        eeg.drop_bad(reject=dict(eeg=args.reject / 1000000))

    #
    # Plot continuous data
    #
    if isinstance(eeg, mne.io.BaseRaw):
        fig = eeg.plot(
            scalings=scalings,
            start=args.start,
            duration=args.duration,
            bgcolor=args.bgcolor,
            highpass=args.highpass,
            lowpass=args.lowpass,
            block=True,
            show=False,
        )

    #
    # Plot epoched data
    #
    else:
        print(f"Event types: {eeg.event_id}")

        fig = eeg.plot(
            scalings=scalings,
            picks="all",
            n_epochs=args.epochs,
            block=True,
            show=False,
        )

    fig.set_figheight(args.height)
    fig.set_figwidth(args.width)
    fig.set_layout_engine("tight")

    if args.save:
        if args.savename == None:
            filename = f"{root}_{args.start}.png"
        else:
            filename = args.savename
        plt.savefig(filename)
        print(f"Saved {filename}")
    else:
        plt.show()

    if args.resave:
        eeg.save(args.resave, overwrite=args.overwrite)


if __name__ == "__main__":
    main()
