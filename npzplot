#!/usr/bin/env python3
import argparse
import os
from json import load
from os.path import basename

import matplotlib
import matplotlib.pyplot as plt
import numpy as np

matplotlib.use("tkagg")


def load_and_plot_npz(npz_path, metadata_path, epoch_num):

    with open(metadata_path, "r") as file:
        metadata = load(file)
    channels = metadata["CHANNELS"]
    fs = metadata["FS"]
    epoch_len = metadata["EPOCH_LENGTH"]
    window_step = metadata["WINDOW_STEP"]

    samples_per_epoch = epoch_len * fs
    time_vector = np.arange(0, samples_per_epoch) / fs

    data = np.load(npz_path)
    X = data["X"]
    y = data["y"]
    num_chans = X.shape[-1]
    num_cols = (num_chans // 10) + 1
    num_rows = num_chans // num_cols + (num_chans % num_cols > 0)
    print(f"{num_chans=}, {num_rows=}, {num_cols=}")
    fig, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(15, 40))
    for ch_ndx in range(num_chans):
        row = ch_ndx // num_cols
        col = ch_ndx % num_cols
        try:
            if num_cols>1:
                ax = axes[row, col]
            else:
                ax=axes[row]
            ax.plot(time_vector, X[epoch_num, :, ch_ndx])
            ax.set_title(f"Channel {channels[ch_ndx]} ({ch_ndx+1})")
            ax.set_xlabel("Time (s)")
            ax.set_xticks(np.arange(0, max(time_vector) + 1, 5))
        except:
            print(f"{row=}, {col=}")
            continue

    plt.gcf().canvas.manager.set_window_title(
        f"{basename(npz_path)}, Sample {epoch_num}, Time {epoch_num*window_step} secs,  y={y[epoch_num]}"
    )
    plt.tight_layout(pad=3.0)
    plt.show()


def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description="NPZ File Plot Utility")
    parser.add_argument("npz_path", type=str, help="Path to the npz file")
    parser.add_argument(
        "metadata_path", type=str, help="Path to metadata with channel and FS"
    )
    parser.add_argument(
        "--epoch_num",
        type=int,
        default=28,
        help="Optional epoch number to specify a specific epoch for analysis",
    )

    # Parse arguments
    args = parser.parse_args()

    # Load and print model information
    load_and_plot_npz(args.npz_path, args.metadata_path, epoch_num=args.epoch_num)


if __name__ == "__main__":
    main()
