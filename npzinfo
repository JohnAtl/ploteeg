#!/usr/bin/env python3

import argparse
import re
import sys
from argparse import RawDescriptionHelpFormatter
from collections import deque
from collections.abc import Mapping, Set
from numbers import Number
from os.path import splitext

import matplotlib.pyplot as plt
import mne
import numpy as np
from numpy import load

ZERO_DEPTH_BASES = (str, bytes, Number, range, bytearray)


def getsize(obj_0):
    """Recursively iterate to sum size of object & members."""
    _seen_ids = set()

    def inner(obj):
        obj_id = id(obj)
        if obj_id in _seen_ids:
            return 0
        _seen_ids.add(obj_id)
        size = sys.getsizeof(obj)
        if isinstance(obj, ZERO_DEPTH_BASES):
            pass  # bypass remaining control flow and return
        elif isinstance(obj, (tuple, list, Set, deque)):
            size += sum(inner(i) for i in obj)
        elif isinstance(obj, Mapping) or hasattr(obj, "items"):
            size += sum(inner(k) + inner(v) for k, v in getattr(obj, "items")())
        # Check for custom object instances - may subclass above too
        if hasattr(obj, "__dict__"):
            size += inner(vars(obj))
        if hasattr(obj, "__slots__"):  # can have __slots__ with __dict__
            size += sum(
                inner(getattr(obj, s)) for s in obj.__slots__ if hasattr(obj, s)
            )
        return size

    return inner(obj_0)


def main():
    parser = argparse.ArgumentParser(
        prog="npzinfo",
        description="""
        Inspect contents of .npz files.
        Specialized for Neurogram files.

    """,
        formatter_class=RawDescriptionHelpFormatter,
    )
    parser.add_argument("filename", nargs="+", help="filename to inspect")
    parser.add_argument(
        "-t",
        "--test-inf",
        help="test for infinite values, exit -1 if so",
        action="store_true",
    )
    parser.add_argument(
        "-q",
        "--quiet",
        help="suppress most printed output",
        action="store_true",
    )
    args = parser.parse_args()

    #
    # L O A D   T H E   D A T A   F I L E
    #
    totals = {}
    missing_cnt = 0
    for filename in args.filename:
        if not args.quiet:
            print("=" * 40)
            print(filename)
        data = load(filename, allow_pickle=True)

        # print(f"Object size: {getsize(data)}")

        for key, value in data.items():
            if not args.quiet:
                print(f"Key: {key}")
                print(f"Value: shape {value.shape}")
                try:
                    print(f"       len   {len(value)}")
                except:
                    print(f"             {value}")
                print(f"       type  {value.dtype}")

            if key == "y":
                classes, counts = np.unique(value, return_counts=True)
                if len(classes) < 5:
                    with open("missing_found.txt", "a") as f:
                        f.write(filename)
                        f.write("\n")
                    missing_cnt += 1
                for ndx in range(len(classes)):
                    if not args.quiet:
                        print(f"      {classes[ndx]}: {counts[ndx]:7,d}")
                    with open("missing_found.txt", "a") as f:
                        f.write("\t")
                        f.write(f"      {classes[ndx]}: {counts[ndx]:7,d}")
                        f.write("\n")

                    if not classes[ndx] in totals:
                        totals[int(classes[ndx])] = counts[ndx]
                    else:
                        totals[int(classes[ndx])] += counts[ndx]
            if args.test_inf:
                try:
                    if np.any(np.isinf(value)):
                        print("infinity(ies) found")
                        with open("inf_found.txt", "a") as f:
                            f.write(filename)
                            f.write("\n")
                except:
                    pass  # don't care if it doesn't support isinf()
    print(f"Totals for {len(args.filename)} file(s):")
    for key, value in totals.items():
        print(f"{key}: {value:7,d}")
    print(f"{missing_cnt} had missing classes")


if __name__ == "__main__":
    main()
